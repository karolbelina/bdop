CREATE TABLE zmiany (
  id_zmiany NUMBER(2)
            GENERATED BY DEFAULT ON NULL AS IDENTITY
            CONSTRAINT zmi_pk PRIMARY KEY,
  edytujacy VARCHAR2(15)
            CONSTRAINT zmi_edytujacy_nn NOT NULL,
  data      DATE
            CONSTRAINT zmi_data_nn NOT NULL,
  edytowany VARCHAR2(15)
            CONSTRAINT zmi_koc_pseudo_fk REFERENCES kocury(pseudo),
  operacja  VARCHAR2(15)
            CONSTRAINT zmi_operacja_nn NOT NULL
);

CREATE OR REPLACE TRIGGER check_ration
BEFORE INSERT OR UPDATE ON kocury
FOR EACH ROW
DECLARE
  maxm NUMBER;
  minm NUMBER;
  edytujacy zmiany.edytujacy%TYPE;
  operacja zmiany.operacja%TYPE;
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  SELECT max_myszy, min_myszy
    INTO maxm, minm
    FROM funkcje
   WHERE funkcja = :NEW.funkcja;

  IF :NEW.przydzial_myszy > maxm OR :NEW.przydzial_myszy < minm THEN
    operacja := CASE
      WHEN INSERTING THEN 'INSERT'
      WHEN UPDATING THEN 'UPDATE'
    END;

    edytujacy := LOGIN_USER;

    INSERT INTO zmiany (edytujacy, data, edytowany, operacja)
    VALUES (edytujacy, SYSDATE, :NEW.pseudo, operacja);

    COMMIT;

    RAISE_APPLICATION_ERROR(-20001,'Dana wartosc jest za duza lub za mala. Nie wykonano zmian.');
  END IF;
END;

UPDATE kocury
   SET przydzial_myszy = 60
 WHERE pseudo = 'UCHO';

ROLLBACK;

DROP TRIGGER check_ration;
DROP TABLE zmiany;
