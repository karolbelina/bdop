DROP TABLE myszy;

BEGIN
  FOR kot IN (SELECT pseudo
                FROM kocury)
  LOOP
    EXECUTE IMMEDIATE 'DROP TABLE myszy_' || kot.pseudo;
  END LOOP;
  COMMIT;
END;


DECLARE
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  EXECUTE IMMEDIATE 'CREATE TABLE myszy (
    nr_myszy       NUMBER
                   GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT my_pk PRIMARY KEY,
    lowca          VARCHAR(15)
                   CONSTRAINT mys_koc_lowca_fk REFERENCES kocury(pseudo),
    zjadacz        VARCHAR(15)
                   CONSTRAINT mys_koc_zjadacz_fk REFERENCES kocury(pseudo),
    waga_myszy     NUMBER
                   CONSTRAINT mys_waga_myszy_nn NOT NULL
                   CONSTRAINT mys_waga_myszy_ch CHECK(waga_myszy BETWEEN 25 AND 50),
    data_zlowienia DATE
                   CONSTRAINT mys_data_zlowienia_nn NOT NULL,
    data_wydania   DATE
  )';
  COMMIT;
END;
/

BEGIN
  FOR kot IN (SELECT pseudo
                FROM kocury)
  LOOP
    EXECUTE IMMEDIATE 'CREATE TABLE myszy_' || kot.pseudo || ' (
      nr_myszy       NUMBER
                     GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT my_' || kot.pseudo || '_pk PRIMARY KEY,
      lowca          VARCHAR(15)
                     CONSTRAINT mys_' || kot.pseudo || '_koc_lowca_fk REFERENCES kocury(pseudo),
      waga_myszy     NUMBER
                     CONSTRAINT mys_' || kot.pseudo || '_waga_myszy_nn NOT NULL
                     CONSTRAINT mys_' || kot.pseudo || '_waga_myszy_ch CHECK(waga_myszy BETWEEN 25 AND 50),
      data_zlowienia DATE
                     CONSTRAINT mys_' || kot.pseudo || '_data_zlowienia_nn NOT NULL
    )';
  END LOOP;
  COMMIT;
END;
/

INSERT INTO myszy_TYGRYS VALUES (1, 'TYGRYS', 30, '2019-01-15');
INSERT INTO myszy_TYGRYS VALUES (2, 'TYGRYS', 31, '2019-01-15');
INSERT INTO myszy_TYGRYS VALUES (3, 'TYGRYS', 32, '2019-01-15');
INSERT INTO myszy_TYGRYS VALUES (4, 'TYGRYS', 33, '2019-01-15');

DECLARE
  kiedy DATE := '2004-01-01';
  sroda DATE;
  dzien NUMBER;
  miesiac NUMBER;

  TYPE PSEUDO_TABLE IS TABLE OF kocury.pseudo%TYPE INDEX BY BINARY_INTEGER;
  pseuda PSEUDO_TABLE;
  pseudo kocury.pseudo%TYPE;

  ile NUMBER;

  dyn_query VARCHAR2(1024);
BEGIN
  sroda := kiedy;
  DBMS_RANDOM.INITIALIZE(19254);

  WHILE kiedy <= '2019-01-19'
  LOOP
    SELECT EXTRACT(MONTH FROM kiedy)
      INTO miesiac
      FROM DUAL;

    SELECT EXTRACT(DAY FROM kiedy)
      INTO dzien
      FROM DUAL;

    sroda := NEXT_DAY(LAST_DAY(ADD_MONTHS(sroda, 1)) - 7, 'środa');

    -- collect the pseudos
    dyn_query := 'SELECT pseudo
                    FROM kocury
                   WHERE w_stadku_od < ''' || kiedy || '''';
    EXECUTE IMMEDIATE dyn_query BULK COLLECT INTO pseuda;

    -- fetch the actual consumption
    SELECT SUM(NVL(przydzial_myszy, 0) + NVL(myszy_extra, 0))
      INTO ile
      FROM kocury
     WHERE w_stadku_od < sroda;

    -- roughly distribute the mice
    FOR i IN 1..ile
    LOOP
      pseudo := pseuda(DBMS_RANDOM.VALUE(1, pseuda.COUNT));

      INSERT INTO myszy(lowca, zjadacz, waga_myszy, data_zlowienia, data_wydania)
      VALUES (pseudo, NULL, ROUND(DBMS_RANDOM.VALUE(25, 50), 2), kiedy + DBMS_RANDOM.VALUE(0, 31), sroda);
    END LOOP;

    -- assign the eater
    FOR kot IN (SELECT pseudo, NVL(przydzial_myszy, 0) + NVL(myszy_extra, 0) zjada
                  FROM kocury
                 ORDER BY zjada DESC)
    LOOP
      UPDATE myszy
         SET zjadacz = kot.pseudo
       WHERE zjadacz IS NULL
         AND ROWNUM <= kot.zjada;
    END LOOP;

    COMMIT;
    kiedy := LAST_DAY(kiedy) + 1;
  END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE przyjecie_myszy_na_stan(ps kocury.pseudo%TYPE, dzien DATE)
AS
  nr_myszy NUMBER;
  czy_kot NUMBER;
  dyn_query VARCHAR2(2000);

  TYPE MYSZY_ROW IS RECORD (
    nr myszy.nr_myszy%TYPE,
    lowca myszy.lowca%TYPE,
    zjadacz myszy.zjadacz%TYPE,
    waga_myszy myszy.waga_myszy%TYPE,
    data_zlowienia myszy.data_zlowienia%TYPE,
    data_wydania myszy.data_wydania%TYPE
  );

  TYPE MYSZY_TABLE IS TABLE OF MYSZY_ROW INDEX BY BINARY_INTEGER;
  dane MYSZY_TABLE;

  TYPE UPOLOWANE_MYSZY_ROW IS RECORD (
    nr_myszy myszy.nr_myszy%TYPE,
    lowca myszy.lowca%TYPE,
    waga_myszy myszy.waga_myszy%TYPE,
    data_zlowienia myszy.data_zlowienia%TYPE
  );

  TYPE UPOLOWANE_MYSZY_TABLE IS TABLE OF UPOLOWANE_MYSZY_ROW INDEX BY BINARY_INTEGER;
  upolowane_myszy UPOLOWANE_MYSZY_TABLE;

  KOT_NIEZNALEZIONY EXCEPTION;
BEGIN
  SELECT COUNT(*)
    INTO czy_kot
    FROM kocury
    WHERE pseudo = ps;

  IF czy_kot = 0 THEN
      RAISE KOT_NIEZNALEZIONY;
  END IF;

  SELECT MAX(nr_myszy)
    INTO nr_myszy
    FROM myszy;

  dyn_query := 'SELECT nr_myszy, lowca, waga_myszy, data_zlowienia
                  FROM myszy_' || ps || '
                  WHERE data_zlowienia = ''' || TO_CHAR(dzien, 'YYYY-MM-DD') || '''';
  EXECUTE IMMEDIATE dyn_query BULK COLLECT INTO upolowane_myszy;
  nr_myszy := nr_myszy + 1;

  FOR i IN 1..upolowane_myszy.COUNT
  LOOP
    dane(i).nr := nr_myszy;
    dane(i).lowca := upolowane_myszy(i).lowca;
    dane(i).waga_myszy := upolowane_myszy(i).waga_myszy;
    dane(i).data_zlowienia := upolowane_myszy(i).data_zlowienia;
    nr_myszy := nr_myszy + 1;
  END LOOP;

  FORALL j IN 1..dane.COUNT SAVE EXCEPTIONS
    INSERT INTO myszy(nr_myszy, lowca, zjadacz, waga_myszy, data_zlowienia, data_wydania)
    VALUES(dane(j).nr, dane(j).lowca, NULL, dane(j).waga_myszy, dane(j).data_zlowienia, NULL);

  dyn_query := 'DELETE FROM myszy_' || ps || '
                  WHERE data_zlowienia = ''' || TO_CHAR(dzien, 'YYYY-MM-DD') || '''';
  EXECUTE IMMEDIATE dyn_query;
EXCEPTION
  WHEN KOT_NIEZNALEZIONY THEN
    DBMS_OUTPUT.PUT_LINE('Nie ma takiego kota w stadzie');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE wyplata
AS
  sroda DATE := NEXT_DAY(LAST_DAY(SYSDATE) - 7, 'środa');
  licznik1 NUMBER := 1;
  licznik2 NUMBER := 1;
  flag BOOLEAN := TRUE;

  TYPE MYSZY_ROW IS RECORD (
      nr myszy.nr_myszy%TYPE,
      lowca myszy.lowca%TYPE,
      zjadacz myszy.zjadacz%TYPE,
      waga_myszy myszy.waga_myszy%TYPE,
      data_zlowienia myszy.data_zlowienia%TYPE,
      data_wydania myszy.data_wydania%TYPE
  );

  TYPE MYSZY_TABLE IS TABLE OF MYSZY_ROW INDEX BY BINARY_INTEGER;
  dane MYSZY_TABLE;

  TYPE DANE_KOTA_ROW IS RECORD (pseudo kocury.pseudo%TYPE, myszy NUMBER(3));
  TYPE DANE_KOTA_TABLE IS TABLE OF DANE_KOTA_ROW INDEX BY BINARY_INTEGER;
  koty DANE_KOTA_TABLE;
BEGIN
  SELECT *
    BULK COLLECT INTO dane
    FROM myszy
    WHERE zjadacz IS NULL;

    SELECT pseudo, NVL(przydzial_myszy, 0) + NVL(myszy_extra, 0) AS myszy
      BULK COLLECT INTO koty
      FROM kocury
    WHERE w_stadku_od <= NEXT_DAY(LAST_DAY(ADD_MONTHS(SYSDATE, -1)) - 7, 'środa')
    START WITH szef IS NULL
  CONNECT BY PRIOR pseudo = szef
    ORDER BY LEVEL ASC;

  FOR i IN 1..dane.COUNT
  LOOP
    flag := TRUE;
    licznik2 := licznik1;

    WHILE flag
    LOOP
        IF licznik1 > koty.COUNT THEN
          licznik1 := 1;
        END IF;

        IF koty(licznik1).myszy > 0 THEN
          dane(i).zjadacz := koty(licznik1).pseudo;
          dane(i).data_wydania := sroda;
          koty(licznik1).myszy := koty(licznik1).myszy - 1;
          flag := FALSE;
        END IF;

        licznik1 := licznik1 + 1;

        IF licznik2 = licznik1 THEN
          dane(i).zjadacz := 'TYGRYS';
          dane(i).data_wydania := sroda;
          flag := FALSE;
        END IF;
    END LOOP;
  END LOOP;

  FORALL j IN 1..dane.COUNT SAVE EXCEPTIONS
      UPDATE myszy
          SET data_wydania = dane(j).data_wydania, zjadacz = dane(j).zjadacz
        WHERE nr_myszy = dane(j).nr;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/
